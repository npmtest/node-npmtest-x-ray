{"/home/travis/build/npmtest/node-npmtest-x-ray/test.js":"/* istanbul instrument in package npmtest_x_ray */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-x-ray/lib.npmtest_x_ray.js":"/* istanbul instrument in package npmtest_x_ray */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_x_ray = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_x_ray = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-x-ray/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-x-ray && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_x_ray */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_x_ray\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_x_ray.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_x_ray.rollup.js'] =\n            local.assetsDict['/assets.npmtest_x_ray.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_x_ray.__dirname + '/lib.npmtest_x_ray.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray/index.js":"'use strict'\n\nvar objectAssign = require('./lib/util').objectAssign\nvar compact = require('./lib/util').compact\nvar isArray = require('./lib/util').isArray\nvar absolutes = require('./lib/absolutes')\nvar streamHelper = require('./lib/stream')\nvar isUrl = require('./lib/util').isUrl\nvar Crawler = require('x-ray-crawler')\nvar resolve = require('./lib/resolve')\nvar root = require('./lib/util').root\nvar params = require('./lib/params')\nvar debug = require('debug')('x-ray')\nvar cheerio = require('cheerio')\nvar enstore = require('enstore')\nvar walk = require('./lib/walk')\nvar fs = require('fs')\n\nvar CONST = {\n  CRAWLER_METHODS: ['concurrency', 'throttle', 'timeout', 'driver', 'delay', 'limit'],\n  INIT_STATE: {\n    stream: false,\n    concurrency: Infinity,\n    paginate: false,\n    limit: Infinity\n  }\n}\n\nfunction Xray (options) {\n  var crawler = Crawler()\n  options = options || {}\n  var filters = options.filters || {}\n\n  function xray (source, scope, selector) {\n    var args = params(source, scope, selector)\n    selector = args.selector\n    source = args.source\n    scope = args.context\n\n    var state = objectAssign({}, CONST.INIT_STATE)\n    var store = enstore()\n    var pages = []\n    var stream\n\n    var walkHTML = WalkHTML(xray, selector, scope, filters)\n    var request = Request(crawler)\n\n    function node (source2, fn) {\n      if (arguments.length === 1) {\n        fn = source2\n      } else {\n        source = source2\n      }\n\n      debug('params: %j', {\n        source: source,\n        scope: scope,\n        selector: selector\n      })\n\n      if (isUrl(source)) {\n        debug('starting at: %s', source)\n        request(source, function (err, html) {\n          if (err) return next(err)\n          var $ = load(html, source)\n          walkHTML($, next)\n        })\n      } else if (scope && ~scope.indexOf('@')) {\n        debug('resolving to a url: %s', scope)\n        var url = resolve(source, false, scope, filters)\n\n        // ensure that a@href is a URL\n        if (!isUrl(url)) {\n          debug('%s is not a url. Skipping!', url)\n          return walkHTML(load(''), next)\n        }\n\n        debug('resolved \"%s\" to a %s', scope, url)\n        request(url, function (err, html) {\n          if (err) return next(err)\n          var $ = load(html, url)\n          walkHTML($, next)\n        })\n      } else if (source) {\n        var $ = load(source)\n        walkHTML($, next)\n      } else {\n        debug('%s is not a url or html. Skipping!', source)\n        return walkHTML(load(''), next)\n      }\n\n      function next (err, obj, $) {\n        if (err) return fn(err)\n        var paginate = state.paginate\n        var limit = --state.limit\n\n        // create the stream\n        if (!stream) {\n          if (paginate) stream = streamHelper.array(state.stream)\n          else stream = streamHelper.object(state.stream)\n        }\n\n        if (paginate) {\n          if (isArray(obj)) {\n            pages = pages.concat(obj)\n          } else {\n            pages.push(obj)\n          }\n\n          if (limit <= 0) {\n            debug('reached limit, ending')\n            stream(obj, true)\n            return fn(null, pages)\n          }\n\n          var url = resolve($, false, paginate, filters)\n          debug('paginate(%j) => %j', paginate, url)\n\n          if (!isUrl(url)) {\n            debug('%j is not a url, finishing up', url)\n            stream(obj, true)\n            return fn(null, pages)\n          }\n\n          stream(obj)\n\n          // debug\n          debug('paginating %j', url)\n          isFinite(limit) && debug('%s page(s) left to crawl', limit)\n\n          request(url, function (err, html) {\n            if (err) return next(err)\n            var $ = load(html, url)\n            walkHTML($, next)\n          })\n        } else {\n          stream(obj, true)\n          fn(null, obj)\n        }\n      }\n\n      return node\n    }\n\n    node.paginate = function (paginate) {\n      if (!arguments.length) return state.paginate\n      state.paginate = paginate\n      return node\n    }\n\n    node.limit = function (limit) {\n      if (!arguments.length) return state.limit\n      state.limit = limit\n      return node\n    }\n\n    node.stream = function () {\n      state.stream = store.createWriteStream()\n      var rs = store.createReadStream()\n      streamHelper.waitCb(rs, node)\n      return rs\n    }\n\n    node.write = function (path) {\n      if (!arguments.length) return node.stream()\n      state.stream = fs.createWriteStream(path)\n      streamHelper.waitCb(state.stream, node)\n      return state.stream\n    }\n\n    return node\n  }\n\n  CONST.CRAWLER_METHODS.forEach(function (method) {\n    xray[method] = function () {\n      if (!arguments.length) return crawler[method]()\n      crawler[method].apply(crawler, arguments)\n      return this\n    }\n  })\n\n  return xray\n}\n\nfunction Request (crawler) {\n  return function request (url, fn) {\n    debug('fetching %s', url)\n    crawler(url, function (err, ctx) {\n      if (err) return fn(err)\n      debug('got response for %s with status code: %s', url, ctx.status)\n      return fn(null, ctx.body)\n    })\n  }\n}\n\nfunction load (html, url) {\n  html = html || ''\n  var $ = html.html ? html : cheerio.load(html)\n  if (url) $ = absolutes(url, $)\n  return $\n}\n\nfunction WalkHTML (xray, selector, scope, filters) {\n  return function walkHTML ($, fn) {\n    walk(selector, function (v, k, next) {\n      if (typeof v === 'string') {\n        var value = resolve($, root(scope), v, filters)\n        return next(null, value)\n      } else if (typeof v === 'function') {\n        return v($, function (err, obj) {\n          if (err) return next(err)\n          return next(null, obj)\n        })\n      } else if (isArray(v)) {\n        if (typeof v[0] === 'string') {\n          return next(null, resolve($, root(scope), v, filters))\n        } else if (typeof v[0] === 'object') {\n          var $scope = $.find ? $.find(scope) : $(scope)\n          var pending = $scope.length\n          var out = []\n\n          // Handle the empty result set (thanks @jenbennings!)\n          if (!pending) return next(null, out)\n\n          $scope.each(function (i, el) {\n            var $innerscope = $scope.eq(i)\n            var node = xray(scope, v[0])\n            node($innerscope, function (err, obj) {\n              if (err) return next(err)\n              out[i] = obj\n              if (!--pending) {\n                return next(null, compact(out))\n              }\n            })\n          })\n          // Nested crawling broken on 'master'. When to merge 'bugfix/nested-crawling' #111, Needed to exit this without calling next, the problem was that it returned to the \"finished\" callback before it had retrived all pending request. it should wait for \"return next(null, compact(out))\"\n          return\n        }\n      }\n      return next()\n    }, function (err, obj) {\n      if (err) return fn(err)\n      fn(null, obj, $)\n    })\n  }\n}\n\nmodule.exports = Xray\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray/lib/util.js":"'use strict'\n\nvar has = Object.prototype.hasOwnProperty\nvar objectAssign = require('object-assign')\nvar isObject = require('isobject')\nvar isUrl = require('is-url')\nvar isArray = Array.isArray\n\n/**\n * Get the root, if there is one.\n *\n * @param {Mixed}\n * @return {Boolean|String}\n */\nfunction root (selector) {\n  return (typeof selector === 'string' || isArray(selector)) &&\n  !~selector.indexOf('@') &&\n  !isUrl(selector) &&\n  selector\n}\n\n/**\n * Compact an array,\n * removing empty objects\n *\n * @param {Array} arr\n * @return {Array}\n */\nfunction compact (arr) {\n  return arr.filter(function (val) {\n    if (!val) return false\n    if (val.length !== undefined) return val.length !== 0\n    for (var key in val) if (has.call(val, key)) return true\n    return false\n  })\n}\n\n/**\n * Check if the string is HTML\n */\nfunction isHTML (str) {\n  str = (str || '').toString().trim()\n  return str[0] === '<' && str[str.length - 1] === '>'\n}\n\nmodule.exports = {\n  root: root,\n  isUrl: isUrl,\n  isArray: isArray,\n  isHTML: isHTML,\n  compact: compact,\n  isObject: isObject,\n  objectAssign: objectAssign\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray/lib/absolutes.js":"/**\n * Module Dependencies\n */\n\nvar url = require('url')\n\n/**\n * Export `absolute`\n */\n\nmodule.exports = absolute\n\n/**\n * Selector\n */\n\nvar selector = [\n  'a[href]',\n  'img[src]',\n  'script[src]',\n  'link[href]',\n  'source[src]',\n  'track[src]',\n  'img[src]',\n  'frame[src]',\n  'iframe[src]'\n].join(',')\n\n/**\n * Checks if a given string is a valid URL\n *\n * @param {String} src\n * @return {Boolean}\n */\n\nfunction isValidUrl (src) {\n  try {\n    url.parse(src)\n    return true\n  } catch (e) {\n    return false\n  }\n}\n\n/**\n * Change all the URLs into absolute urls\n *\n * @param {String} path\n * @param {Cheerio} $\n * @return {$}\n */\n\nfunction absolute (path, $) {\n  var parts = url.parse(path)\n  var remote = parts.protocol + '//' + parts.host\n  // apply <base> tag transformation\n  var base = $('head').find('base')\n  if (base.length === 1) {\n    var href = base.attr('href')\n    if (href) {\n      remote = href\n    }\n  }\n  $(selector).each(abs)\n\n  function abs (i, el) {\n    var $el = $(el)\n    var key = null\n    var src = null\n\n    var hasHref = $el.attr('href')\n    var hashSrc = $el.attr('src')\n\n    if (hasHref) {\n      key = 'href'\n      src = hasHref\n    } else if (hashSrc) {\n      key = 'src'\n      src = hashSrc\n    } else {\n      return\n    }\n\n    src = src.trim()\n\n    if (~src.indexOf('://')) {\n      return\n    } else if (isValidUrl(src)) {\n      var current\n      if (href && src.indexOf('/') !== 0) {\n        current = url.resolve(remote, href)\n        src = url.resolve(current, src)\n      } else {\n        current = url.resolve(remote, parts.pathname)\n        src = url.resolve(current, src)\n      }\n    }\n\n    $el.attr(key, src)\n  }\n\n  return $\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray/lib/stream.js":"var isArray = require('./util').isArray\n\nmodule.exports = {\n  /**\n   * Streaming array helper\n   *\n   * @param {Stream} data (optional)\n   */\n  array: function stream_array (stream) {\n    if (!stream) return function () {}\n    var first = true\n\n    return function _stream_array (data, end) {\n      var json = JSON.stringify(data, true, 2)\n\n      if (first) {\n        stream.write('[\\n')\n        first = false\n      }\n\n      if (isArray(data)) {\n        json = json.slice(1, -1)\n      }\n\n      if (end) {\n        stream.end(json + ']')\n      } else {\n        stream.write(json + ',')\n      }\n    }\n  },\n\n  /**\n   * Streaming object helper\n   *\n   * @param {Stream} data (optional)\n   * @return {Function}\n   */\n  object: function stream_object (stream) {\n    if (!stream) return function () {}\n\n    return function _stream_object (data, end) {\n      var json = JSON.stringify(data, true, 2)\n\n      if (end) {\n        stream.end(json)\n      } else {\n        stream.write(json)\n      }\n    }\n  },\n\n  waitCb: function stream_callback (stream, fn) {\n    fn(function (err) {\n      if (err) stream.emit('error', err)\n    })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray-crawler/lib/index.js":"/**\n * Export `Create`\n */\n\nmodule.exports = Crawler\n\n/**\n * Module Dependencies\n */\n\nvar context = require('http-context')\nvar enqueue = require('enqueue')\nvar wrapfn = require('wrap-fn')\nvar noop = function(){}\nvar ms = require('ms')\n\n/**\n * Locals\n */\n\nvar rate_limit = require('./rate-limit')\nvar http = require('./http-driver')\nvar range = require('./range')\n\n/**\n * Debug\n */\n\nvar debug = require('debug')('x-ray-crawler')\n\n/**\n * Initialize a `Crawler`\n *\n * @param {Function} driver (optional)\n * @return {Function} crawler(url, fn)\n * @api public\n */\n\nfunction Crawler(driver) {\n  driver = driver || http();\n\n  // defaults\n  var throttle = rate_limit()\n  var concurrency = Infinity\n  var limit = Infinity\n  var request = noop\n  var timeout = false\n  var response = noop\n  var delay = range()\n  var queue = false\n\n  /**\n   * Make a request\n   */\n\n  function crawler(url, fn) {\n    // co support\n    if (1 == arguments.length) {\n      return function _crawler(fn) {\n        return crawler(url, fn)\n      }\n    }\n\n    if (!queue) {\n      var options = {\n        concurrency: concurrency,\n        timeout: timeout,\n        limit: limit\n      }\n\n      queue = enqueue(get, options)\n      queue(url, fn)\n    } else {\n      schedule(url, fn)\n    }\n\n    return crawler\n  }\n\n  /**\n   * Fetch the `url` based on the `driver`\n   *\n   * @param {String} url\n   * @param {Function} fn\n   */\n\n  function get(url, fn) {\n    debug('getting: %s', url)\n    var ctx = context()\n    ctx.url = url\n\n    // request hook\n    request(ctx.request)\n\n    wrapfn(driver, result)(ctx)\n\n    // HTTP response\n    function result(err, res) {\n      if (err) return fn(err)\n\n      // update the context\n      if (res && res != ctx) ctx.body = res\n\n      // post-flight. modify the response\n      response(ctx.response)\n\n      fn(null, ctx)\n    }\n  }\n\n  /**\n   * Schedule another request for later\n   *\n   * @param {String} url\n   * @param {Function} fn\n   */\n\n  function schedule(url, fn) {\n    // if we've reached the limit, don't request anymore\n    if (--limit <= 0) return\n\n    // if specified, throttle requests and add a delay\n    var wait = throttle() + delay()\n\n    debug('queued: \"%s\", waiting \"%sms\"', url, wait)\n    setTimeout(function() {\n      // queue up next request\n      var queued = queue(url, fn)\n      if (!queued) return\n    }, wait)\n  }\n\n  /**\n   * Get or set the driver\n   *\n   * @param {Function} driver\n   * @return {Function|Crawler}\n   * @api public\n   */\n\n  crawler.driver = function(fn) {\n    if (!arguments.length) return driver;\n    driver = fn;\n    return crawler;\n  }\n\n  /**\n   * Throttle according to a rate limit\n   *\n   * @param {Number|String} requests\n   * @param {Number|String} rate\n   * @return {Number|Crawler}\n   * @api public\n   */\n\n  crawler.throttle = function(requests, rate) {\n    if (!arguments.length) return throttle\n\n    if (1 == arguments.length) {\n      rate = requests\n      requests = 1\n    }\n\n    rate = /^\\d/.test(rate) ? rate : 1 + rate\n    rate = 'string' == typeof rate ? ms(rate) : rate\n    throttle = rate_limit(requests, rate)\n    return crawler\n  }\n\n  /**\n   * Delay subsequent requests\n   *\n   * @param {String|Number} from\n   * @param {String|Number} to (optional)\n   * @return {Number|Crawler}\n   * @api public\n   */\n\n  crawler.delay = function(from, to) {\n    if (!arguments.length) return delay\n    from = 'string' == typeof from ? ms(from) : from\n    to = 'string' == typeof to ? ms(to) : to\n    delay = range(from, to)\n    return crawler\n  }\n\n  /**\n   * Specify a request timeout\n   *\n   * @param {String|Number} timeout\n   * @return {Number|Crawler}\n   * @api public\n   */\n\n  crawler.timeout = function(n) {\n    if (!arguments.length) return n\n    timeout = 'string' == typeof n ? ms(n) : n\n    return crawler\n  }\n\n  /**\n   * Specify the driver\n   *\n   * @param {Function} driver\n   * @return {Function|Crawler}\n   */\n\n  crawler.driver = function(fn) {\n    if (!arguments.length) return driver\n    driver = fn\n    return crawler\n  }\n\n  /**\n   * Specify a request concurrency\n   *\n   * @param {Number} n\n   * @return {Number|crawler}\n   */\n\n  crawler.concurrency = function(n) {\n    if (!arguments.length) return concurrency\n    concurrency = n\n    return crawler\n  }\n\n  /**\n   * Hook into the request\n   *\n   * @param {Function} fn\n   * @return {Function|crawler}\n   */\n\n  crawler.request = function(fn) {\n    if (!arguments.length) return request\n    request = fn\n    return crawler\n  }\n\n  /**\n   * Hook into the response\n   *\n   * @param {Function} fn\n   * @return {Function|crawler}\n   */\n\n  crawler.response = function(fn) {\n    if (!arguments.length) return response\n    response = fn\n    return crawler\n  }\n\n  /**\n   * Limit the total number of requests\n   *\n   * @param {Number} n\n   * @return {Number|crawler}\n   */\n\n  crawler.limit = function(n) {\n    if (!arguments.length) return limit\n    limit = n\n    return crawler\n  }\n\n  return crawler\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray-crawler/lib/rate-limit.js":"/**\n * Export `rate_limit`\n */\n\nmodule.exports = rate_limit\n\n/**\n * Create a rate limiter\n *\n * @param {Number} requests\n * @param {Number} rate\n * @return {Number}\n */\n\nfunction rate_limit(requests, rate) {\n  requests = requests || Infinity\n  rate = rate || 0\n\n  var rate = Math.round(rate / requests)\n  var waiting = 0\n  var called = 0\n  var tids = []\n\n  return function _rate_limit(fn) {\n    // clear all timeouts if _rate_limit(0)\n    if (0 === fn) return tids.forEach(clearTimeout)\n\n    var calling = new Date()\n    var delta = calling - called\n    var free = delta > rate && !waiting\n\n    if (free) {\n      called = calling\n      return 0\n    } else {\n      var wait = (rate - delta) + (waiting++ * rate)\n      timer(wait)\n      return wait\n    }\n\n    function timer(ms) {\n      tids[tids.length] = setTimeout(function() {\n        called = new Date()\n        waiting--\n      }, ms)\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray-crawler/lib/http-driver.js":"/**\n * Module Dependencies\n */\n\nvar superagent = require('superagent')\n\n/**\n * Export `driver`\n */\n\nmodule.exports = driver\n\n/**\n * Default HTTP driver\n *\n * @param {Object} opts\n * @return {Function}\n */\n\nfunction driver(opts) {\n  var agent = superagent.agent(opts || {})\n\n  return function http_driver(ctx, fn) {\n    agent\n      .get(ctx.url)\n      .set(ctx.headers)\n      .end(function(err, res) {\n        if (err && !err.status) return fn(err)\n\n        ctx.status = res.status\n        ctx.set(res.headers)\n\n        ctx.body = 'application/json' == ctx.type\n          ? res.body\n          : res.text\n\n        // update the URL if there were redirects\n        ctx.url = res.redirects.length\n          ? res.redirects.pop()\n          : ctx.url\n\n        return fn(null, ctx)\n      })\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray-crawler/lib/range.js":"/**\n * Export `range`\n */\n\nmodule.exports = range\n\n/**\n * Initialize a `range`\n *\n * @param {Number} from\n * @param {Number} to\n * @return {Function}\n */\n\nfunction range(from, to) {\n  from = from || 0\n  to = to || from\n\n  return function() {\n    return Math.floor(Math.random() * (to - from + 1) + from)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray/lib/resolve.js":"/**\n * Module Dependencies\n */\n\nvar debug = require('debug')('resolve')\nvar isArray = require('./util').isArray\nvar parse = require('x-ray-parse')\n\n/**\n * Export `resolve`\n */\n\nmodule.exports = resolve\n\n/**\n * Initialize `resolve`\n *\n * @param {$} cheerio object\n * @param {String} scope\n * @param {String|Array} selector\n * @param {Object} filters\n * @return {Array|String}\n */\n\nfunction resolve ($, scope, selector, filters) {\n  debug('resolve($j, %j)', scope, selector)\n  filters = filters || {}\n  var array = isArray(selector)\n  var obj = parse(array ? selector[0] : selector)\n  obj.attribute = obj.attribute || 'text'\n\n  if (!obj.selector) {\n    obj.selector = scope\n    scope = null\n  }\n\n  var value = find($, scope, array ? [obj.selector] : obj.selector, obj.attribute)\n  debug('resolved($j, %j) => %j', scope, selector, value)\n\n  if (array && typeof value.map === 'function') {\n    value = value.map(function (v) {\n      return filter(obj, $, scope, selector, v, filters)\n    })\n  } else {\n    value = filter(obj, $, scope, selector, value, filters)\n  }\n\n  return value\n}\n\n/**\n * Find the node(s)\n *\n * @param {Cheerio} $\n * @param {String} scope\n * @param {String|Array} selector\n * @param {String} attr\n * @return {Array|String}\n */\n\nfunction find ($, scope, selector, attr) {\n  if (scope && isArray(selector)) {\n    var $scope = select($, scope)\n    var out = []\n    $scope.map(function (i) {\n      var $el = $scope.eq(i)\n      var $children = select($el, selector[0])\n      $children.map(function (i) {\n        out.push(attribute($children.eq(i), attr))\n      })\n    })\n    return out\n  } else if (scope) {\n    $scope = select($, scope)\n    return attribute($scope.find(selector).eq(0), attr)\n  } else {\n    var $selector\n    if (isArray(selector)) {\n      $selector = select($, selector[0])\n      out = []\n      $selector.map(function (i) {\n        out.push(attribute($selector.eq(i), attr))\n      })\n      return out\n    } else {\n      $selector = select($, selector)\n      return attribute($selector.eq(0), attr)\n    }\n  }\n}\n\n/**\n * Selector abstraction, deals\n * with various instances of $\n *\n * @param {Cheerio} $\n * @param {String} selector\n * @return {Cheerio}\n */\n\nfunction select ($, selector) {\n  if ($.is && $.is(selector)) return $\n  return $.find ? $.find(selector) : $(selector)\n}\n\n/**\n * Select the attribute based on `attr`\n *\n * @param {Cheerio} $\n * @param {String} attr\n * @return {String}\n */\n\nfunction attribute ($el, attr) {\n  switch (attr) {\n    case 'html':\n      return $el.html()\n    case 'text':\n      return $el.text()\n    default:\n      return $el.attr(attr)\n  }\n}\n\n/**\n * Filter the value(s)\n *\n * @param {Object} obj\n * @param {Cheerio} $\n * @param {String} scope\n * @param {String|Array} selector\n * @param {Object} filters\n * @return {Array|String}\n */\n\nfunction filter (obj, $, scope, selector, value, filters) {\n  var ctx = { $: $, selector: obj.selector, attribute: obj.attribute }\n  return (obj.filters || []).reduce(function (out, filter) {\n    var fn = filters[filter.name]\n    if (typeof fn === 'function') {\n      var args = [out].concat(filter.args || [])\n      var filtered = fn.apply(ctx, args)\n      debug('%s.apply(ctx, %j) => %j', filter.name, args, filtered)\n      return filtered\n    } else {\n      throw new Error('Invalid filter: ' + filter.name)\n    }\n  }, value)\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray-parse/index.js":"/**\n * Export `parse`\n */\n\nmodule.exports = parse;\n\n/**\n * Module Dependencies\n */\n\nvar filter_parser = require('format-parser');\n\n/**\n * Regexps\n */\n\nvar rselector = /^([^@]*)(?:@\\s*([\\w-_]+))?$/;\nvar rfilters = /\\s*\\|(?!\\=)\\s*/;\n\n/**\n * Initialize `parse`\n *\n * @param {String}\n * @return {Object}\n */\n\n function parse(str) {\n  var filters = str.split(rfilters);\n  var z = filters.shift();\n  var m = z.match(rselector) || [];\n\n  return {\n    selector: m[1] ? m[1].trim() : m[1],\n    attribute: m[2],\n    filters: filters.length ? filter_parser(filters.join('|')) : []\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray/lib/params.js":"/**\n * Module Dependencies\n */\n\nvar isHTML = require('./util').isHTML\nvar isUrl = require('./util').isUrl\n\n/**\n * Export `params`\n */\n\nmodule.exports = params\n\n/**\n * Sort out the parameters\n *\n * @param {String|Array|Object} source\n * @param {String|Array|Object} context\n * @param {String|Array|Object} selector\n * @return {Object}\n */\n\nfunction params (source, context, selector) {\n  var args = {}\n  if (undefined === context) {\n    args.source = null\n    args.context = null\n    args.selector = source\n  } else if (undefined === selector) {\n    if (isUrl(source) || source.html || isHTML(source)) {\n      args.source = source\n      args.context = null\n    } else {\n      args.source = null\n      args.context = source\n    }\n    args.selector = context\n  } else {\n    args.source = source\n    args.context = context\n    args.selector = selector\n  }\n\n  return args\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray/lib/walk.js":"/**\n * Module Dependencies\n */\n\nvar isObject = require('./util').isObject\nvar Batch = require('batch')\n\n/**\n * Walk\n */\n\nmodule.exports = walk\n\n/**\n * Walk recursively, providing\n * callbacks for each step.\n *\n * @param {Mixed} value\n * @param {Function} fn\n * @param {Function} done\n * @param {String} key (private)\n */\n\nfunction walk (value, fn, done, key) {\n  var batch = Batch()\n  var out\n\n  if (isObject(value)) {\n    out = {}\n    Object.keys(value).forEach(function (k) {\n      var v = value[k]\n      batch.push(function (next) {\n        walk(v, fn, function (err, value) {\n          if (err) return next(err)\n          // ignore undefined values\n          if (undefined !== value && value !== '') {\n            out[k] = value\n          }\n          next()\n        }, k)\n      })\n    })\n  } else {\n    out = null\n    batch.push(function (next) {\n      fn(value, key, function (err, v) {\n        if (err) return next(err)\n        out = v\n        next()\n      })\n    })\n  }\n\n  batch.end(function (err) {\n    if (err) return done(err)\n    return done(null, out)\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-x-ray/node_modules/x-ray/lib/adapter.js":"/**\n * Module dependencies\n */\n\nvar assign = require('object-assign')\nvar Nightmare = require('nightmare')\n\n/**\n * Export `Adapter`\n */\n\nmodule.exports = Adapter;\n\n/**\n * Defaults\n */\n\nvar defaults = {}\n\n/**\n * Initialize `Adapter`\n *\n * @param {Object} options\n */\n\nfunction Adapter(options) {\n  if (!(this instanceof Adapter)) return new Adapter(options)\n  this.state = assign(defaults, {\n    nightmare: new Nightmare()\n  }, options);\n}\n\n/**\n * get\n */\n\nAdapter.prototype.get = function(url, headers, fn) {\n  var nightmare = this.state.nightmare\n\n  nightmare\n    // .headers(headers)\n    .goto(url)\n\n  fn()\n\n  return this\n};\n\n/**\n * Get the html\n */\n\nAdapter.prototype.html = function(fn) {\n  var nightmare = this.state.nightmare\n\n  nightmare.evaluate(function() {\n    return document.documentElement.outerHTML\n  })\n\n  nightmare.run(fn)\n  return this\n};\n\n/**\n * click\n */\n\nAdapter.prototype.click = function(selector, fn) {\n  var nightmare = this.state.nightmare\n  nightmare.click(selector)\n  nightmare.wait('title')\n  nightmare.run(fn)\n};\n\n/**\n * wait\n */\n\nAdapter.prototype.wait = function(wait, fn) {\n  var nightmare = this.state.nightmare\n  nightmare.wait(wait)\n  nightmare.run(fn)\n};\n\n\n/**\n * run\n */\n\nAdapter.prototype.run = function(fn) {\n  var nightmare = this.state.nightmare\n  nightmare.run(fn)\n};\n\n\n\n/**\n * close\n */\n\nAdapter.prototype.close = function(fn) {\n  var nightmare = this.state.nightmare\n  nightmare.end(fn)\n  return this\n};\n"}